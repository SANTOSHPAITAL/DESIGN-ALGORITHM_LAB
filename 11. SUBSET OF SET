/*Design and implement in Java to find a subset of a given set S = {Sl, 
S2,.....,Sn} of n positive integers whose SUM is equal to a given positive integer d. 
For example, if S ={1, 2, 5, 6, 8} and d= 9, there are two solutions {1,2,6}and {1,8}. 
Display a suitable message, if the given problem instance doesn't have a solution.*/

import java.util.Scanner;
public class subset {
int w[]=new int[20],x[]=new int[20],d;
void subset1(int cs,int k,int r)
{
 int i;
 x[k]=1;
 if((cs+w[k])==d)
 {
 for(i=0;i<=k;i++)
 if(x[i]==1)
 System.out.println(w[i]);
 }
 else
 if(cs+w[k]+w[k+1]<=d)
 subset1(cs+w[k],k+1,r-w[k]);
if((cs+r-w[k]>=d)&&(cs+w[k+1]<=d))
 {
 x[k]=0;
subset1(cs,k+1,r-w[k]);
}
}
public static void main(String args[])
{
 int i,n,sum=0;
 subset s= new subset();
System.out.println("Enter the no. of elements: ");
Scanner in=new Scanner(System.in);
 n=in.nextInt();
 System.out.println("Enter the elements in increasing order:\n");
 for(i=1;i<=n;i++)
 s.w[i]=in.nextInt();
 System.out.println("Enter the required sum(d): ");
 s.d=in.nextInt();
 for(i=1;i<=n;i++)
 sum+=s.w[i];
 if(sum<s.d||s.w[1]>s.d)
 System.out.println("Subset not possible!!\n");
 else
 {
 System.out.println("The possible subsets are:\n");
 s.subset1(0,1,sum);
 }
 }
}
